swapoff -a
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml


Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.30.196.172:6443 --token <token> \
        --discovery-token-ca-cert-hash <token> --cri-socket unix:///var/run/cri-dockerd.sock
# Use this command for both initial installation, and subsequent config changes
helm upgrade --install juicefs-csi-driver juicefs/juicefs-csi-driver -n kube-system -f ./values.yaml



juicefs format --storage s3 \
    --bucket <> \
    --access-key <> \
    --secret-key <> \
    redis://127.0.0.1:6379/0 \
    juicefsfors3


root@vivekyadav-vesu:~# juicefs format --storage s3 \
    --bucket <> \
    --access-key <> \
    --secret-key <> \
    redis://127.0.0.1:6379/0 \
    juicefsfors3
2024/11/08 13:33:45.582455 juicefs[135529] <INFO>: Meta address: redis://127.0.0.1:6379/0 [interface.go:504]
2024/11/08 13:33:45.585836 juicefs[135529] <WARNING>: AOF is not enabled, you may lose data if Redis is not shutdown properly. [info.go:84]
2024/11/08 13:33:45.586509 juicefs[135529] <INFO>: Ping redis latency: 434.308µs [redis.go:3515]
2024/11/08 13:33:45.588236 juicefs[135529] <INFO>: Data use <> [format.go:484]
2024/11/08 13:33:47.751478 juicefs[135529] <INFO>: Volume is formatted as {
  "Name": "juicefsfors3",
  "UUID": "<>",
  "Storage": "s3",
  "Bucket": "<>",
  "AccessKey": "<>",
  "SecretKey": "removed",
  "BlockSize": 4096,
  "Compression": "none",
  "EncryptAlgo": "aes256gcm-rsa",
  "KeyEncrypted": true,
  "TrashDays": 1,
  "MetaVersion": 1,
  "MinClientVersion": "1.1.0-A",
  "DirStats": true,
  "EnableACL": false
} [format.go:521]


kubectl taint nodes  vivekyadav-vesu node-role.kubernetes.io/control-plane-
kubectl taint nodes  mildevkub040 node-role.kubernetes.io/master-

# Use this command for both initial installation, and subsequent config changes
helm upgrade --install juicefs-csi-driver juicefs/juicefs-csi-driver -n kube-system -f ./values.yaml
root@vivekyadav-vesu:~/juicefs-csi-driver# helm upgrade --install juicefs-csi-driver juicefs/juicefs-csi-driver -n kube-system -f ./values.yaml
root@vivekyadav-vesu:~/juicefs-csi-driver# helm upgrade --install juicefs-csi-driver juicefs/juicefs-csi-driver -n kube-system -f ./values.yaml
Release "juicefs-csi-driver" does not exist. Installing it now.
NAME: juicefs-csi-driver
LAST DEPLOYED: Sat Nov  9 23:20:17 2024
NAMESPACE: kube-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
Guide on how to configure a StorageClass or PV and start using the driver are here:
https://juicefs.com/docs/csi/guide/pv

Before start, you need to configure file system credentials in Secret:

- If you are using JuiceFS enterprise, you should create a file system in JuiceFS console, refer to this guide: https://juicefs.com/docs/cloud/getting_started/#create-file-system

- If you are using JuiceFS community, you should prepare a metadata engine and object storage:
  1. For metadata server, you can refer to this guide: https://juicefs.com/docs/community/databases_for_metadata
  2. For object storage, you can refer to this guide: https://juicefs.com/docs/community/how_to_setup_object_storage

Run these commands to mount JuiceFS (See Mounting the file system for more):

curl -L https://juicefs.com/static/juicefs -o /usr/local/bin/juicefs && chmod +x /usr/local/bin/juicefs
sudo /usr/local/bin/juicefs mount demo-juicefs-vol /jfs 
When asked for token:

Token: <>

Then you can use this file to test:

```
apiVersion: v1
kind: Secret
metadata:
  name: juicefs-secret
  namespace: default
type: Opaque
stringData:
  name: juicefs-vol              # The JuiceFS file system name
  access-key: <ACCESS_KEY>       # Object storage credentials
  secret-key: <SECRET_KEY>       # Object storage credentials
  # follows are for JuiceFS enterprise
  token: ${JUICEFS_TOKEN}        # Token used to authenticate against JuiceFS Volume
  # follows are for JuiceFS community
  metaurl: <META_URL>            # Connection URL for metadata engine.
  storage: s3                    # Object storage type, such as s3, gs, oss.
  bucket: <BUCKET>               # Bucket URL of object storage.
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: juicefs-sc
provisioner: csi.juicefs.com
parameters:
  csi.storage.k8s.io/provisioner-secret-name: juicefs-secret
  csi.storage.k8s.io/provisioner-secret-namespace: default
  csi.storage.k8s.io/node-publish-secret-name: juicefs-secret
  csi.storage.k8s.io/node-publish-secret-namespace: default
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: juicefs-pvc
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Pi
  storageClassName: juicefs-sc
---
apiVersion: v1
kind: Pod
metadata:
  name: juicefs-app
  namespace: default
spec:
  containers:
  - args:
    - -c
    - while true; do echo $(date -u) >> /data/out.txt; sleep 5; done
    command:
    - /bin/sh
    image: busybox
    name: app
    volumeMounts:
    - mountPath: /data
      name: pvc-ce75a135-7456-4d55-907a-dcd36f049f8b
  volumes:
  - name: pvc-ce75a135-7456-4d55-907a-dcd36f049f8b
    persistentVolumeClaim:
      claimName: juicefs-pvc
```

root@vivekyadav-vesu:~/juicefs-csi-driver# mount --bind /var/lib/juicefs/volume /var/lib/juicefs/volume
mount --make-shared /var/lib/juicefs/volume
root@vivekyadav-vesu:~/juicefs-csi-driver# sudo mount --make-shared /var/lib/juicefs/volume

sudo mount --make-shared /

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl delete pod juicefs-csi-controller-0 -n kube-system

kubectl exec -it juicefs-pod -- /bin/bash


kubectl patch pvc juicefs-pvc -p '{"metadata":{"finalizers":null}}'
kubectl patch pv juicefs-pv -p '{"metadata":{"finalizers":null}}'

juicefs mount -d "redis://redis:6379/0" /mnt/jfs
root@vivekyadav-vesu:~# juicefs mount -d "redis://127.0.0.1:6379/0" /mnt/jfs
2024/11/09 23:00:58.951210 juicefs[574665] <INFO>: Meta address: redis://127.0.0.1:6379/0 [interface.go:504]
2024/11/09 23:00:58.965099 juicefs[574665] <WARNING>: AOF is not enabled, you may lose data if Redis is not shutdown properly. [info.go:84]
2024/11/09 23:00:58.965885 juicefs[574665] <INFO>: Ping redis latency: 509.899µs [redis.go:3515]
2024/11/09 23:00:58.978104 juicefs[574665] <INFO>: Data use s3://internbucketjuicefs/juicefsfors3/ [mount.go:629]
2024/11/09 23:00:59.482671 juicefs[574665] <INFO>: OK, juicefsfors3 is ready at /mnt/jfs [mount_unix.go:200]

root@vivekyadav-vesu:~# sudo /usr/local/bin/juicefs mount demo-juicefs-vol /jfs
Token for demo-juicefs-vol: <>
Access key ID for s3 bucket juicefs-demo-juicefs-vol: <>
Secret access key for s3 bucket juicefs-demo-juicefs-vol: <>
.......OK, demo-juicefs-vol is ready at /jfs.

kubectl run -i --tty --rm test-mount --image=juicefs/juicefs:latest -- bash
juicefs mount redis://redis:6379/0 /mnt/test


root@vivekyadav-vesu:~/configjuicefs# juicefs mount -d "redis://redis:6379/0" /mnt/jfs
OK, redis://redis:6379/0 is ready at /mnt/jfs.

    ports:
    - containerPort: 6379
      protocol: TCP
    args:
      - "--maxmemory-policy"
      - "noeviction"

root@vivekyadav-vesu:~/configjuicefs# redis-cli CONFIG GET maxmemory-policy
1) "maxmemory-policy"
2) "noeviction"
root@vivekyadav-vesu:~/configjuicefs# kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP    2d7h
redis        ClusterIP   10.104.250.19   <none>        6379/TCP   21h
root@vivekyadav-vesu:~/configjuicefs# kubectl get po
NAME                    READY   STATUS    RESTARTS   AGE
redis-674dcff7b-6vcdd   1/1     Running   0          35s


https://charts.bitnami.com/
$ helm repo add bitnami https://charts.bitnami.com/bitnami
$ helm search repo bitnami
$ helm install my-release bitnami/<chart>

root@vivekyadav-vesu:~# helm install my-release bitnami/redis -n kube-system
NAME: my-release
LAST DEPLOYED: Mon Nov 11 10:03:20 2024
NAMESPACE: kube-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: redis
CHART VERSION: 20.2.1
APP VERSION: 7.4.1

** Please be patient while the chart is being deployed **

Redis&reg; can be accessed on the following DNS names from within your cluster:

    my-release-redis-master.kube-system.svc.cluster.local for read/write operations (port 6379)
    my-release-redis-replicas.kube-system.svc.cluster.local for read-only operations (port 6379)



To get your password run:

    export REDIS_PASSWORD=$(kubectl get secret --namespace kube-system my-release-redis -o jsonpath="{.data.redis-password}" | base64 -d)

To connect to your Redis&reg; server:

1. Run a Redis&reg; pod that you can use as a client:

   kubectl run --namespace kube-system redis-client --restart='Never'  --env REDIS_PASSWORD=$REDIS_PASSWORD  --image docker.io/bitnami/redis:7.4.1-debian-12-r0 --command -- sleep infinity

   Use the following command to attach to the pod:

   kubectl exec --tty -i redis-client \
   --namespace kube-system -- bash

2. Connect using the Redis&reg; CLI:
   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h my-release-redis-master
   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h my-release-redis-replicas

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace kube-system svc/my-release-redis-master 6379:6379 &
    REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h 127.0.0.1 -p 6379

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - replica.resources
  - master.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Ensure the directory exists and is owned by the correct user (e.g., 'redis')
mkdir -p /data
chown -R redis:redis /data

# Set read-write-execute permissions for the directory
chmod -R 777 /data

root@vivekyadav-vesu:~# export REDIS_PASSWORD=$(kubectl get secret --namespace kube-system my-release-redis -o jsonpath="{.data.redis-password}" | base64 -d)
root@vivekyadav-vesu:~# echo $REDIS_PASSWORD
<>

metaurl "redis://:<>@10.96.196.4:6379/1" 

vi /etc/sysctl.conf -> net.ipv4.ip_forward = 0

iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -F



││ E1112 17:05:33.057277       6 secret_controller.go:135] "secret-controller: auth failed" 
err="juicefs auth 16s timed out" output=""││ E1112 17:22:35.030962  6 juicefs.go:290] "juicefs/Settings:
 Get PV with volumeID error" err="k8s client is nil" volumeId=""
 ││ I1112 17:22:35.031128       6 juicefs.go:697] "juicefs/AuthFs: AuthFs 
 cmd" args=[/usr/bin/juicefs auth demo-juicefs-vol --access-key=<> 
 --token=${token} --secret-key=${secretkey} --conf-dir=/root/.juicefs]││ I1112 17:22:35.033087
 6 juicefs.go:697] "juicefs/AuthFs: AuthFs cmd" args=[/usr/bin/juicefs auth demo-juicefs-vol 
 --access-key=<> --token=${token} --secret-key=${secretkey}
  --conf-dir=/tmp/juicefs-1087490930]││ I1112 17:22:51.037830       6 juicefs.go:715] 
  "juicefs/AuthFs: auth output" output="2024/11/12 17:22:38.825751 juicefs[1083]
<WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount:
Post \"https://juicefs.com/volume/demo-juicefs-vol/mount\": c ││ 
ontext deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 0) 
[auth.go:717]\n2024/11/12 17:22:41.827139 juicefs[1083] <WARNING>: 
get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: 
Post \"https://juicefs.com/volume/demo-juicefs ││ -vol/mount\": 
context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 1) 
[auth.go:717]\n2024/11/12 17:22:43.931179 juicefs[1083] <WARNING>: get config: 
POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post \"https://juicefs.com/volu ││ 
me/demo-juicefs-vol/mount\": tls: failed to verify certificate: x509: 
certificate is not valid for any names, but wanted to match juicefs.com (tried 2) 
[auth.go:717]\n2024/11/12 17:22:46.371846 juicefs[1083] <WARNING>: 
get config: POST https://juicefs.com/volume/de ││ mo-juicefs-vol/mount: 
Post \"https://juicefs.com/volume/demo-juicefs-vol/mount\": tls: 
failed to verify certificate: x509: certificate is not valid for any names,
 but wanted to match juicefs.com (tried 3) [auth.go:717]\n"                                             


root@vivekyadav-vesu:~/.juicefs# vi demo-juicefs-vol.conf

{
  "master": "aws-us-east-1-4.meta.juicefs.com:9405",
  "master_ip": [
    "54.156.14.70",
    "34.234.156.35",
    "52.55.76.242"
  ],
  "rootname": "demo-juicefs-vol",
  "password": "<>",
  "uuid": "<>",
  "storage": "s3",
  "region": "us-east-1",
  "token": "<>",
  "bucket": "<>",
  "accesskey": "<>",
  "secretkey": "<>",
  "accesskey2": null,
  "secretkey2": null,
  "aksk_encrypted": true,
  "blockdevs": [],
  "tested": 1,
  "cfg_url": "https://juicefs.com/volume/%s/mount",
  "blockSize": 4096,
  "partitions": 256,
  "compress": "none",
  "no_encrypt": true


root@vivekyadav-vesu:~# juicefs mount demo-juicefs-vol /jfs
Token for demo-juicefs-vol: cb924533a9caf90c7a76f5f89a7e74a337b88d72
2024/11/13 05:21:28.468568 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 0) [auth.go:717]
2024/11/13 05:21:31.469233 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 1) [auth.go:717]
2024/11/13 05:21:35.471344 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 2) [auth.go:717]
2024/11/13 05:21:40.473300 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 3) [auth.go:717]
2024/11/13 05:21:46.475145 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 4) [auth.go:717]
2024/11/13 05:21:53.477521 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 5) [auth.go:717]
2024/11/13 05:22:01.479263 juicefs[163991] <WARNING>: get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: Post "https://juicefs.com/volume/demo-juicefs-vol/mount": context deadline exceeded (Client.Timeout exceeded while awaiting headers) (tried 6) [auth.go:717]
Access key ID for s3 bucket juicefs-demo-juicefs-vol: <>
Secret access key for s3 bucket juicefs-demo-juicefs-vol: <>
......OK, demo-juicefs-vol is ready at /jfs.

for p in $(kubectl get pods | grep Terminating | awk '{print $1}'); do kubectl delete pod $p --grace-period=0 --force;done

root@vivekyadav-vesu:~# juicefs auth demo-juicefs-vol --token <> --access-key <> --secret-key <>

# Note: This dropin only works with kubeadm and kubelet v1.11+
[Service]
Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
# This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
EnvironmentFile=-/etc/default/kubelet
ExecStart=
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS


2024/11/13 11:23:16.200403 juicefs[7] <WARNING>: 
get config: POST https://juicefs.com/volume/demo-juicefs-vol/mount: 
Post "https://juicefs.com/volume/de ││ mo-juicefs-vol/mount": 
tls: failed to verify certificate: x509: certificate is not valid for any names, 
but wanted to match juicefs.com (tried 5) [auth. ││ o:717[]

kubectl --insecure-skip-tls-verify cluster-info dump

echo '{
  "master": "aws-us-east-1-4.meta.juicefs.com:9405",
  "master_ip": [
    "54.156.14.70",
    "34.234.156.35",
    "52.55.76.242"
  ],
  "rootname": "demo-juicefs-vol",
  "password": "<>",
  "uuid": "<>",
  "storage": "s3",
  "region": "us-east-1",
  "token": "<>",
  "bucket": "<>",
  "accesskey": "<>",
  "secretkey": "<>",
  "accesskey2": null,
  "secretkey2": null,
  "aksk_encrypted": true,
  "blockdevs": [],
  "tested": 1,
  "cfg_url": "https://juicefs.com/volume/%s/mount",
  "blockSize": 4096,
  "partitions": 256,
  "compress": "none",
  "no_encrypt": true
}' > /root/.juicefs/demo-juicefs-vol.conf

JFS_LATEST_TAG=$(curl -s https://api.github.com/repos/juicedata/juicefs/releases/latest | grep 'tag_name' | cut -d '"' -f 4 | tr -d 'v')
curl -L -o juicefs-${JFS_LATEST_TAG}-linux-amd64.tar.gz "https://github.com/juicedata/juicefs/releases/download/v${JFS_LATEST_TAG}/juicefs-${JFS_LATEST_TAG}-linux-amd64.tar.gz"
mkdir juice && tar -zxvf "juicefs-${JFS_LATEST_TAG}-linux-amd64.tar.gz" -C juice
sudo install juice/juicefs /usr/local/bin
